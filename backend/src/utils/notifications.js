import nodemailer from 'nodemailer'

// Email transporter configuration
const createTransporter = () => {
  return nodemailer.createTransport({
    host: process.env.SMTP_HOST,
    port: process.env.SMTP_PORT,
    secure: process.env.SMTP_PORT == 465, // true for 465, false for other ports
    auth: {
      user: process.env.SMTP_USER,
      pass: process.env.SMTP_PASS,
    },
  })
}

// Email templates
const emailTemplates = {
  'email-verification': (data) => ({
    subject: '–ü–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ - EduGuide',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #0ea5e9, #a855f7); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
          <h1 style="color: white; margin: 0; font-size: 28px;">EduGuide</h1>
          <p style="color: white; margin: 10px 0 0 0; font-size: 16px;">–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±—É–¥—É—â–µ–≥–æ</p>
        </div>
        <div style="background: white; padding: 40px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
          <h2 style="color: #1f2937; margin: 0 0 20px 0;">–ü—Ä–∏–≤–µ—Ç, ${data.name}!</h2>
          <p style="color: #6b7280; font-size: 16px; line-height: 1.6; margin: 0 0 30px 0;">
            –°–ø–∞—Å–∏–±–æ –∑–∞ —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—é –≤ EduGuide! –î–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –Ω–∞—á–∞–ª–∞ —Ä–∞–±–æ—Ç—ã —Å –Ω–∞—à–∏–º –ò–ò-–ø–æ–º–æ—â–Ω–∏–∫–æ–º, 
            –ø–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–¥—Ç–≤–µ—Ä–¥–∏ —Å–≤–æ–π email –∞–¥—Ä–µ—Å.
          </p>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${data.verificationLink}" 
               style="background: linear-gradient(135deg, #0ea5e9, #a855f7); color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: bold; font-size: 16px; display: inline-block;">
              –ü–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç—å Email
            </a>
          </div>
          <p style="color: #9ca3af; font-size: 14px; margin: 30px 0 0 0;">
            –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π –∏ –≤—Å—Ç–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä:<br>
            <a href="${data.verificationLink}" style="color: #0ea5e9;">${data.verificationLink}</a>
          </p>
          <p style="color: #9ca3af; font-size: 12px; margin: 20px 0 0 0; border-top: 1px solid #e5e7eb; padding-top: 20px;">
            –ï—Å–ª–∏ —Ç—ã –Ω–µ —Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä–æ–≤–∞–ª—Å—è –≤ EduGuide, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π —ç—Ç–æ –ø–∏—Å—å–º–æ.
          </p>
        </div>
      </div>
    `
  }),

  'password-reset': (data) => ({
    subject: '–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è - EduGuide',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #0ea5e9, #a855f7); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
          <h1 style="color: white; margin: 0; font-size: 28px;">EduGuide</h1>
          <p style="color: white; margin: 10px 0 0 0; font-size: 16px;">–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±—É–¥—É—â–µ–≥–æ</p>
        </div>
        <div style="background: white; padding: 40px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
          <h2 style="color: #1f2937; margin: 0 0 20px 0;">–°–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è</h2>
          <p style="color: #6b7280; font-size: 16px; line-height: 1.6; margin: 0 0 30px 0;">
            –ü—Ä–∏–≤–µ—Ç, ${data.name}! –ú—ã –ø–æ–ª—É—á–∏–ª–∏ –∑–∞–ø—Ä–æ—Å –Ω–∞ —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è –¥–ª—è —Ç–≤–æ–µ–≥–æ –∞–∫–∫–∞—É–Ω—Ç–∞ EduGuide.
          </p>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${data.resetLink}" 
               style="background: linear-gradient(135deg, #0ea5e9, #a855f7); color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: bold; font-size: 16px; display: inline-block;">
              –°–±—Ä–æ—Å–∏—Ç—å –ø–∞—Ä–æ–ª—å
            </a>
          </div>
          <p style="color: #9ca3af; font-size: 14px; margin: 30px 0 0 0;">
            –ï—Å–ª–∏ –∫–Ω–æ–ø–∫–∞ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, —Å–∫–æ–ø–∏—Ä—É–π –∏ –≤—Å—Ç–∞–≤—å —ç—Ç—É —Å—Å—ã–ª–∫—É –≤ –±—Ä–∞—É–∑–µ—Ä:<br>
            <a href="${data.resetLink}" style="color: #0ea5e9;">${data.resetLink}</a>
          </p>
          <p style="color: #ef4444; font-size: 14px; margin: 20px 0 0 0; padding: 15px; background: #fef2f2; border-radius: 8px; border-left: 4px solid #ef4444;">
            <strong>–í–∞–∂–Ω–æ:</strong> –≠—Ç–∞ —Å—Å—ã–ª–∫–∞ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–∞ —Ç–æ–ª—å–∫–æ –≤ —Ç–µ—á–µ–Ω–∏–µ 1 —á–∞—Å–∞. 
            –ï—Å–ª–∏ —Ç—ã –Ω–µ –∑–∞–ø—Ä–∞—à–∏–≤–∞–ª —Å–±—Ä–æ—Å –ø–∞—Ä–æ–ª—è, –ø—Ä–æ—Å—Ç–æ –ø—Ä–æ–∏–≥–Ω–æ—Ä–∏—Ä—É–π —ç—Ç–æ –ø–∏—Å—å–º–æ.
          </p>
        </div>
      </div>
    `
  }),

  'welcome': (data) => ({
    subject: '–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ EduGuide!',
    html: `
      <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
        <div style="background: linear-gradient(135deg, #0ea5e9, #a855f7); padding: 30px; text-align: center; border-radius: 10px 10px 0 0;">
          <h1 style="color: white; margin: 0; font-size: 28px;">EduGuide</h1>
          <p style="color: white; margin: 10px 0 0 0; font-size: 16px;">–ò–ò-–ø–æ–º–æ—â–Ω–∏–∫ –¥–ª—è –≤—ã–±–æ—Ä–∞ –±—É–¥—É—â–µ–≥–æ</p>
        </div>
        <div style="background: white; padding: 40px; border-radius: 0 0 10px 10px; box-shadow: 0 4px 6px rgba(0,0,0,0.1);">
          <h2 style="color: #1f2937; margin: 0 0 20px 0;">–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å, ${data.name}! üéâ</h2>
          <p style="color: #6b7280; font-size: 16px; line-height: 1.6; margin: 0 0 30px 0;">
            –¢–≤–æ–π email —É—Å–ø–µ—à–Ω–æ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω! –¢–µ–ø–µ—Ä—å —Ç—ã –º–æ–∂–µ—à—å –Ω–∞—á–∞—Ç—å —Å–≤–æ–π –ø—É—Ç—å –∫ –æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–º—É –≤—ã–±–æ—Ä—É –±—É–¥—É—â–µ–≥–æ.
          </p>
          <div style="background: #f0f9ff; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #1e40af; margin: 0 0 15px 0;">–ß—Ç–æ –¥–∞–ª—å—à–µ?</h3>
            <ul style="color: #6b7280; margin: 0; padding-left: 20px;">
              <li style="margin-bottom: 8px;">–ü—Ä–æ–π–¥–∏ –ø—Ä–æ—Ñ–æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ç–µ—Å—Ç—ã</li>
              <li style="margin-bottom: 8px;">–ü–æ–ª—É—á–∏ –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏</li>
              <li style="margin-bottom: 8px;">–ò–∑—É—á–∏ –ø–æ–¥—Ö–æ–¥—è—â–∏–µ —É—á–µ–±–Ω—ã–µ –∑–∞–≤–µ–¥–µ–Ω–∏—è</li>
              <li style="margin-bottom: 8px;">–°–æ—Å—Ç–∞–≤—å –ø–ª–∞–Ω –¥–µ–π—Å—Ç–≤–∏–π</li>
            </ul>
          </div>
          <div style="text-align: center; margin: 30px 0;">
            <a href="${process.env.FRONTEND_URL}/dashboard" 
               style="background: linear-gradient(135deg, #0ea5e9, #a855f7); color: white; padding: 15px 30px; text-decoration: none; border-radius: 8px; font-weight: bold; font-size: 16px; display: inline-block;">
              –ù–∞—á–∞—Ç—å —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ
            </a>
          </div>
        </div>
      </div>
    `
  })
}

// Send email function
export const sendEmail = async ({ to, subject, template, data }) => {
  try {
    const transporter = createTransporter()
    
    const templateData = emailTemplates[template]
    if (!templateData) {
      throw new Error(`Email template '${template}' not found`)
    }

    const emailContent = templateData(data)
    
    const mailOptions = {
      from: `"EduGuide" <${process.env.SMTP_USER}>`,
      to,
      subject: emailContent.subject,
      html: emailContent.html
    }

    const result = await transporter.sendMail(mailOptions)
    console.log('Email sent successfully:', result.messageId)
    return result

  } catch (error) {
    console.error('Email sending failed:', error)
    throw error
  }
}

// Send SMS function (placeholder - would need actual SMS service integration)
export const sendSMS = async ({ to, message }) => {
  try {
    // This is a placeholder implementation
    // In production, you would integrate with a real SMS service like Twilio, SMS.ru, etc.
    console.log(`SMS to ${to}: ${message}`)
    
    // For development, just log the SMS
    if (process.env.NODE_ENV === 'development') {
      console.log('üì± SMS (Development mode):', { to, message })
      return { success: true, messageId: 'dev-' + Date.now() }
    }
    
    // In production, implement actual SMS sending
    throw new Error('SMS service not configured')
    
  } catch (error) {
    console.error('SMS sending failed:', error)
    throw error
  }
}

// Send verification SMS
export const sendVerificationSMS = async (phone, code) => {
  const message = `EduGuide: –í–∞—à –∫–æ–¥ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è: ${code}. –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.`
  return await sendSMS({ to: phone, message })
}

// Send password reset SMS
export const sendPasswordResetSMS = async (phone, code) => {
  const message = `EduGuide: –ö–æ–¥ –¥–ª—è —Å–±—Ä–æ—Å–∞ –ø–∞—Ä–æ–ª—è: ${code}. –ö–æ–¥ –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª–µ–Ω 10 –º–∏–Ω—É—Ç.`
  return await sendSMS({ to: phone, message })
}
